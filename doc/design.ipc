## Nexus IPC
#
#  This document is very much work in progress
#  Last update: 20100406

Nexus is a microkernel OS; like other microkernels, it implements
a message-passing interface for communication between processes.
Nexus has not always been a microkernel; its IPC interfaces still
supports in-kernel endpoints as well as process endpoints.

## Interface

IPC in Nexus has evolved, with the result that there are multiple
IPC interfaces. Generalizing, there are four:

- ipc_send / ipc_recv implements low-level unidirectional
  communication channels. Other calls in this interface are
	  IPC_CreatePort :	acquire a mailbox ('port')
	  IPC_DestroyPort :	release a mailbox
	  IPC_Send :		send bytes to a port
	  IPC_Recv :		blocking wait on a port
	  IPC_RecvFrom :	Recv, but also learn caller pid
	  ipc_recv :		Recv, but a bit faster
	  ipc_recvfrom :	RecvFrom, but a bit faster
	  ipc_sendpage :	Send, but use page-swapping
	  ipc_recvpage :	Recv, but use page-swapping

- IPC_Invoke / IPC_RecvCall implements an RPC interface.
  Other calls in this interface are
  	IPC_CreatePort
	IPC_DestroyPort
	IPC_BindRequest	:	open a 'connection' to a port
	// _UnbindRequest :	is missing
	
- Mem_Share_Page implements zero-copy page sharing. It must
  be combined with an event system (such as IPC_Send). 
  The nxblock_.. set of interfaces uses it to implement
  descriptor queues.

- AsyncRecv / AsyncDone / AsyncSend is a DEPRECATED unidirectional
  communication method similar to IPC_Send/IPC_Recv

## Implementation

The main implementation lives in kernel/ipc/impl.c.
Port and connection accounting is implemented in kernel/ipc/registry.c.
The aforementioned interface for in-kernel clients lives in kernel/ipc/iface.c.

Userspace callers can use the autogenerated code based on the IPC.sc IDL file
or the faster non-generated alternatives in user/include/nexus/syscalls.h. The
capitalized versions (e.g., IPC_Send) are generated, the all-lowercase versions
use direct system calling (e.g., ipc_send)

