service InterposeEventDriver {
  decls {
    includefiles { "<op_types.h>" }
    includefiles { "<nexus/ipc.h>" }
    includefiles { "<nexus/transfer.h>" }
    includefiles { "<nexus/interpose.h>" }

    struct CallInfo {
      struct IEvent_Info event_info;
      struct IEvent_Call_Info call_info;
    };

    extern int call_count, transfer_count;
  }

  decls __callee__ {
    // includefiles { "\"PingPong_Interpose.interpose.h\"" }
    includefiles { "<pthread.h>" }
    includefiles { "<nexus/util.h>" }
    includefiles { "<stdio.h>" }
    includefiles { "<nexus/IPC.interface.h>" }
    includefiles { "<assert.h>" }
    includefiles { "<string.h>" }
    includefiles { "\"all-null.h\"" }

    IDL_SERVER_VARDEFS(InterposeEventDriver);

    int call_count = 0, transfer_count = 0;
  }

  __callee__ {
  }

  interface __NoGenReturn__
    lf_generate { OID_NONE; }
  lf_check { 1; }
  int IEvent_Call(struct IEvent_Info event_info, struct IEvent_Call_Info call_info, 
		__input__ struct VarLen message) {
    call_count++;
    static int last_src_ipd;
    if(last_src_ipd != event_info.src) {
      printf("src=%d ", event_info.src);
    }
    last_src_ipd = event_info.src;
    IPC_Interposition_CallPassThrough(call_handle, &call_info);
    return 0;
  }

  interface __NoGenReturn__
    lf_generate { OID_NONE; }
  lf_check { 1; }
  int IEvent_Transfer(struct IEvent_Info event_info, struct IEvent_Transfer_Info transfer_info, __input__ struct VarLen data) {
    transfer_count++;
    IPC_Interposition_TransferPassThrough(call_handle);
    return 0;
  }
}
