/** NexusOS: IPC interface for kernel resources that corresponds to the 
  	     user interface generated by IPC.sc 			*/

#ifndef _USER_COMPAT_H_
#define _USER_COMPAT_H_

#include <nexus/ipc.h>

#define dump_stack_trace(p) dump_stack()

#define V_nexus(S) V(S)

#define writefile(n,b,l) send_file(n,b,l)

#define SHA_CTX struct sha1_ctx
#define SHA1_Init(x)       sha1_init(x)
#define SHA1_Update(x,d,l) sha1_update(x,d,l)
#define SHA1_Final(o,x)    sha1_final(x,o)

#define Crypto_GetRandBytes(d,n) RAND_bytes(d,n)

enum ChannelOption;

int IPC_register(void);
int IPC_unregister(int oid);

// The definitions below are kept in-sync with IPC.sc

int IPC_Send(int port_num, void *data, int dlen);
int IPC_Recv(int port_num, void *buf, int blen);

// XXX In the kernel, first argument of IPC_RecvCall() is interpreted as a BasicThread *
struct CallDescriptor;
Call_Handle IPC_RecvCall(Port_Handle _target_thread, char * message_dest, int * message_len_p, struct CallDescriptor * cdesc);

#include <nexus/ipc.h>
#include <nexus/ipd.h>
#include <nexus/ipc_private.h>
#include <nexus/thread.h>
#include <nexus/thread-inline.h>
#include <nexus/thread-private.h>

/* see declaration in kernel/nexus/ipc.c for explanation of changes */
int IPC_CallReturn(Call_Handle call_handle) __attribute__((weak));
int IPC_TransferTo(Call_Handle call_handle, 
		   int desc_num, 
	           unsigned int remote, 
		   void * local, 
		   int len) __attribute__((weak));
int IPC_TransferFrom(Call_Handle call_handle, 
		     int desc_num, 
		     void * local, 
		     unsigned int remote, 
		     int len) __attribute__((weak));

// For now, a kernel connection is just the destination port

Connection_Handle IPC_BindRequest(Port_Num port_num);
int IPC_BindCommit(Connection_Handle conn_handle, Port_Handle control_handle);

#define g_Wrap_port_handle (nexusthread_current_ipd()->default_notification_handle)

Connection_Handle IPC_DoBind(Port_Num target);

// XXX deprecated
int IPC_BindLabel(Connection_Handle conn_handle);

int IPC_CloseConnection(Connection_Handle conn_handle);

Port_Num CallHandle_to_Port_Num(IPD *ipd, Call_Handle call_handle);
IPC_Msg *CallHandle_to_IPC_Msg(IPD *ipd, Call_Handle call_handle);

typedef void (*IPC_CallHandler)(Call_Handle caller);
typedef int (*IPC_Bind_Handler)(Connection_Handle caller, Port_Handle *notification_port_handle);
typedef void (*IPC_Async_Handler)(IPD_ID source_ipd, Call_Handle call_handle, void *_ctx);

int IPCPort_set_handlers(Port_Handle port_handle, IPC_CallHandler call_handler, IPC_Bind_Handler bind_handler);
int IPCPort_set_async_handler(Port_Handle port_handle, IPC_Async_Handler ipc_async_handler, void *_ctx);

int IPC_AsyncSend(Connection_Handle conn_handle, 
		  void *message, int message_len,
		  struct TransferDesc *descs,
		  int num_transfer_descs);


struct NS_SimpleRegisterCtx *NS_SimpleRegister(const char *reg_name, Port_Num channel_id);
void NS_SimpleUnregister(struct NS_SimpleRegisterCtx *ctx);

#endif // _USER_COMPAT_H_
